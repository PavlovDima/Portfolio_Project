{
	"info": {
		"_postman_id": "dd9c4377-5fbc-48cd-9d21-65e88f11162e",
		"name": "CA_Mar_Project_Portfolio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24859873"
	},
	"item": [
		{
			"name": "Create new address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"YAY!!! I gog it, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 1000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body has 'id'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.set(\"ID\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.unset(\"ID\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FN}}\",\r\n            \"lastName\": \"{{LN}}\"\r\n        },\r\n        \"company\": \"{{Company}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{AddressLine1}}\",\r\n        \"addressLine2\": \"{{AddressLine2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{City}}\",\r\n        \"country\": \"{{Country}}\",\r\n        \"subdivision\": \"{{Subdivision}}\",\r\n        \"zipCode\": \"{{ZipCode}}\",\r\n        \"phoneNumber\": \"{{PhoneNumber}}\",\r\n        \"location\": {\r\n            \"latitude\": 29.9956312,\r\n            \"longitude\": -81.50836249999999\r\n        }\r\n    },\r\n    \"setAsDefault\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}",
					"host": [
						"{{URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make address by default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"YAY!!! I gog it, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 1000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/default",
					"host": [
						"{{URL}}"
					],
					"path": [
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show all addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"YAY!!! I gog it, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 2000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct ID\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"YAY!!! I gog it, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 2000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct ID\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Entire response is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"FN\");\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"LN\");\r",
							"    pm.expect(jsonData.address.country).to.eql(\"Country\");\r",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"Subdivision\");\r",
							"    pm.expect(jsonData.address.city).to.eql(\"City\");\r",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"ZipCode\");\r",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"PhoneNumber\");\r",
							"    pm.expect(jsonData.address.company).to.eql(\"Company\");\r",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1\");\r",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"AddressLine2\");\r",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address).to.be.a('object');\r",
							"    pm.expect(jsonData.address.id).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.country).to.be.a('string');\r",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');\r",
							"    pm.expect(jsonData.address.city).to.be.a('string');\r",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');\r",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');\r",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');\r",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update existing address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"YAY!!! I gog it, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 2000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"id\": \"{{ID}}\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FN}}\",\r\n            \"lastName\": \"{{LN}}\"\r\n        },\r\n        \"company\": \"{{New_Company}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{AddressLine1}}\",\r\n        \"addressLine2\": \"{{New_AddressLine2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{City}}\",\r\n        \"country\": \"{{Country}}\",\r\n        \"subdivision\": \"{{Subdivision}}\",\r\n        \"zipCode\": \"{{ZipCode}}\",\r\n        \"phoneNumber\": \"{{PhoneNumber}}\",\r\n        \"location\": {\r\n            \"latitude\": 29.9956312,\r\n            \"longitude\": -81.50836249999999\r\n        }\r\n    },\r\n    \"setAsDefault\": false,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"subdivision\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"location.latitude\",\r\n            \"location.longitude\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show updated address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"YAY!!! I gog it, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 2000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct ID\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Entire response is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"FN\");\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"LN\");\r",
							"    pm.expect(jsonData.address.country).to.eql(\"Country\");\r",
							"    pm.expect(jsonData.address.subdivision).to.eql(\"Subdivision\");\r",
							"    pm.expect(jsonData.address.city).to.eql(\"City\");\r",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"ZipCode\");\r",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"PhoneNumber\");\r",
							"    pm.expect(jsonData.address.company).to.eql(\"New_Company\");\r",
							"    pm.expect(jsonData.address.addressLine1).to.eql(\"AddressLine1\");\r",
							"    pm.expect(jsonData.address.addressLine2).to.eql(\"New_AddressLine2\");\r",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function() {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address).to.be.a('object');\r",
							"    pm.expect(jsonData.address.id).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.country).to.be.a('string');\r",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');\r",
							"    pm.expect(jsonData.address.city).to.be.a('string');\r",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');\r",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');\r",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');\r",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete existing address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"There is no more that!\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 2000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 400) {\r",
							"    tests[\"All right!\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found\"] = false;\r",
							"} else if (responseCode.code === 408) {\r",
							"    tests[\"Request Timeout\"] = false;\r",
							"} else if (responseCode.code === 500) {\r",
							"    tests[\"Internal Server Error\"] = false;\r",
							"} else {\r",
							"    tests[\"There is no \" + responseCode.code] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size  is less than 2000 B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct ID\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"'Details'is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "p5e_oe191N_K9A9cvDNGIHlM_7ugO4aFL1hYalT6AH0.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTA2LTIzVDE5OjA2OjAzLjE5NloiLCJ1aWQiOiI1NjczMzMwNC02MTZkLTRjYzUtYjEwNy03ZWM3YjdhZGI3NTciLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImU5MWUxNTZmLTkyOGEtNDMyMi1iNjMxLTlhNDc2Y2ZlMTBhOCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0wNi0yM1QyMzowNjowMy4xOTZaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}